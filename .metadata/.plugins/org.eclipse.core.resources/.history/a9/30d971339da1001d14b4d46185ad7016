package ms.item.server.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.cloud.client.circuitbreaker.CircuitBreakerFactory;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import ms.item.server.models.entity.Item;
import ms.item.server.models.entity.Product;
import ms.item.server.models.service.IItemService;
import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;



@RestController
public class ItemController {

	@GetMapping
	public List<Item> getProductList(){
		return ItemService.getProductItemList();
	}
	
	@GetMapping("/id/{id}/q/{q}")// LA "q" ES DE CANTIDAD DE PRODUCTOS POR ITEM.
	public Item getItem(@PathVariable Long id, @PathVariable Integer q) {	
		//HERE i USE DE CIRCUIT BREAKER WITH PROGRAMATION.
		return cbFactory.create("items")
		.run(()-> ItemService.getItemById(id, q), e -> alternativeMethod2(id, q, e));		
	}
	
	public Item alternativeMethod2(Long id, Integer quantity, Throwable e) {
		Item item = new Item();
		Product product = new Product();
		item.setQuantity(quantity);
		product.setId(id);
		product.setSku("xxxxxxxxxxx");
		product.setName("Unnamed. Record not found!");
		product.setPrice(0.00);
		product.setOrigin("Unknown origin");
		item.setProduct(product);
		return item;
	}
	
	//HERE i USE DE CIRCUIT BREAKER WITH ANNOTATION.
	@CircuitBreaker(name="items",fallbackMethod="metodoAlternativo")
	@GetMapping("/ver2/{id}/cantidad/{cantidad}")	
	public Item detalle2(@PathVariable Long id, @PathVariable Integer cantidad) {
		return ItemService.getItemById(id, cantidad);		
	}
	
	
	
	@Autowired
	//@Qualifier("ItemServiceRestTemplateImpl")
	@Qualifier("ItemServiceFeignImpl")
	private IItemService ItemService;
	
	@Autowired
	private CircuitBreakerFactory cbFactory; 
	
	
}
